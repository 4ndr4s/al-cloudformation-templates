{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Alert Logic Web Security Manager 4.5.1.0-1, autoscaling, cftypes, 1 external ELB",
    "Metadata": {
		"AWS::CloudFormation::Interface" : {
			"ParameterGroups" : [
				{
					"Label" : { "default" : "Network Configuration" },
					"Parameters" : [ "alertLogicDataCenter", "wsmLicense", "vpc", "proxyProtocol", "defaultBackend" ]
				},
				{
					"Label" : { "default" : "Master WSM Configuration" },
					"Parameters" : [ "azMaster", "subnetMaster", "subnetMasterELB", "subnetMasterIsPublic" ]
				},
				{
					"Label" : { "default": "Worker WSM Configuration" },
					"Parameters" : [ "azWorkerList", "subnetWorkerList", "subnetWorkerELBList", "subnetWorkerIsPublic" ]
				},
				{
					"Label" : { "default": "Autoscaling Configuration" },
					"Parameters" : [ "asScaleUpCPUth", "asScaleDownCPUth", "asScaleUpTimeInterval", "asScaleDownTimeInterval" ]
				}
			]
		}
	},
    "Parameters": {
        "vpc": {
            "Type": "AWS::EC2::VPC::Id",
            "Description": "VPC ID (e.g. vpc-abcd0123) where WSM will be deployed.",
            "ConstraintDescription": "vpc: Please enter an existing vpc ID (vpc-abcd0123)"
        },
        "defaultBackend": {
            "Type": "String",
            "Default": "10.1.1.1",
            "Description": "DNS name or IP address of the default backend server for the WSM instance.  This can be changed later.  Typically, this is the internal ELB of the web stack to be protected. This parameter cannot be left blank."
        },
        "proxyProtocol": {
            "Type": "String",
            "Default": "disable",
            "Description": "Enable/disable ELB Proxy Protocol support (must also be enabled on WSM)",
            "AllowedValues": ["enable", "disable"]
        },
        "subnetMasterELB": {
            "Type": "AWS::EC2::Subnet::Id",
            "Description": "Public subnet ID (e.g. subnet-abcd0123) in which the ELB for the master instance will be created.  This subnet must have at least 20 free IP addresses.",
            "ConstraintDescription": "subnetMasterELB: Please enter an existing subnet ID (subnet-abcd0123)"
        },
        "subnetWorkerELBList": {
            "Type": "List<AWS::EC2::Subnet::Id>",
            "Description": "Comma delimited list of one or more public subnet IDs (e.g. subnet-abcd0123,subnet-efab4567) in which the ELB for the worker instance will be created.  Each subnet must have at least 20 free IP addresses.",
            "ConstraintDescription": "subnetWorkerELBList: Please enter an existing subnet ID (subnet-abcd0123)"
        },
        "subnetMaster": {
            "Type": "AWS::EC2::Subnet::Id",
            "Description": "The subnet ID (e.g. subnet-abcd0123) of a existing subnet in az1 where the master instance will be created.  This subnet must be able to communicate with the Internet on port 443 (i.e. be a public subnet or a private subnet with a route to the Internet via NAT instance or VPN)",
            "ConstraintDescription": "subnetMaster: Please enter an existing subnet ID (subnet-abcd0123)"
        },
        "subnetMasterIsPublic": {
            "Type": "String",
            "Default": "true",
            "Description": "Is the master subnet public?  Allowed values: true or false",
            "AllowedValues": ["true", "false"]
        },
        "subnetWorkerList": {
            "Type": "List<AWS::EC2::Subnet::Id>",
            "Description": "Comma delimited list of one or more subnet IDs (e.g. subnet-abcd0123,subnet-efab4567) in which worker instances will be created.  Each subnet must be able to communicate with the Internet on port 443 (i.e. be a public subnet or a private subnet with a route to the Internet via NAT instance or VPN)",
            "ConstraintDescription": "subnetWorkerList: Please enter an existing subnet ID (subnet-abcd0123)"
        },
        "subnetWorkerIsPublic": {
            "Type": "String",
            "Default": "true",
            "Description": "Are the worker subnets public (all worker subnets must be public or private)?  Allowed values: true or false",
            "AllowedValues": ["true", "false"]
        },
        "wsmMasterInstanceType": {
            "Type": "String",
            "Default": "m3.medium",
            "Description": "AWS instance type for WSM master appliance.",
            "AllowedValues": ["m3.medium", "m3.large", "m3.xlarge", "m4.large", "m4.xlarge"]
        },
        "wsmWorkerInstanceType": {
            "Type": "String",
            "Default": "c3.large",
            "Description": "AWS instance type for WSM worker appliances",
            "AllowedValues": ["m3.medium", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge"]
        },
        "wsmWorkerInstanceVolumeSize": {
            "Type": "String",
            "Default": "16",
            "Description": "Size (in GB) of worker EBS volume. Default value should be increased to at least 100GB if static content caching is enabled."
        },
        "azMaster": {
            "Type": "AWS::EC2::AvailabilityZone::Name",
				"Description": "Full name (e.g. us-east-1a) of the availabiltiy zone where the master subnet is located.  Note: must reside within the region where this template is deployed."
        },
        "azWorkerList": {
            "Type": "List<AWS::EC2::AvailabilityZone::Name>",
            "Description": "List of full names (e.g. us-east-1a, us-east-1c) of the availabiltiy zones where the worker subnets are located.  Note: all must reside within the region where this template is deployed."
        },
        "wsmLicense": {
            "Type": "String",
            "Description": "Your WSM license key.  This can be located at https://invision.alertlogic.net/wsm/support",
            "AllowedPattern": "[a-f0-9]{50}",
            "ConstraintDescription": "wsmLicense: Please enter your Alert Logic Registration Key.  "
        },
        "alertLogicDataCenter": {
            "Type": "String",
            "Default": "US-Denver",
            "Description": "AlertLogic Data Center to use as backend (US-Denver/US-Ashburn/UK)",
            "AllowedValues": ["US-Denver", "US-Ashburn", "UK"],
            "ConstraintDescription": "Please enter either US-Denver, US-Ashburn, or UK"
        },
        "wsmUser": {
            "Type": "String",
            "Default": "exampleAdmin",
            "Description": "Emergency access: username for WSM appliance mangement interface"
        },
        "wsmPassword": {
            "Type": "String",
            "NoEcho": "true",
            "MinLength": "8",
            "Description": "Emergency access: password for WSM appliance mangement interface (8 characters minimum)"
        },
        "asScaleUpCPUth": {
            "Type": "String",
            "Default": "80",
            "Description": "Auto Scaling Scale UP CPU utilization threshold in percent",
            "AllowedPattern": "([78][0-9]|90)",
            "ConstraintDescription": "asScaleUpCPUth: Please enter a number between 70 and 90 inclusive"
        },
        "asScaleDownCPUth": {
            "Type": "String",
            "Default": "50",
            "Description": "Auto Scaling Scale DOWN CPU utilization threshold in percent",
            "AllowedPattern": "([345][0-9]|60)",
            "ConstraintDescription": "asScaleDownCPUth: Please enter a number between 30 and 60 inclusive"
        },
        "asScaleUpTimeInterval": {
            "Type": "String",
            "Default": "120",
            "Description": "asScaleUpTimeInterval: Time interval in seconds for when additional WSM workers should be added to the Worker pool if CPU has been above threshold"
        },
        "asScaleDownTimeInterval": {
            "Type": "String",
            "Default": "600",
            "Description": "asScaleDownTimeInterval: Time interval in seconds for when the Worker pool should be scaled down if CPU has been below threshold"
        }
    },
    "Mappings": {
        "mapRegionWsmAmi": {
			"ap-south-1": {
				"64": "ami-3b780f54"
			 },
			"eu-west-1": {
				"64": "ami-4f85dc3c"
			},
			"ap-northeast-2": {
				"64": "ami-9a17c0f4"
			},
			"ap-northeast-1": {
				"64": "ami-db4fffba"
			},
			"sa-east-1": {
				"64": "ami-c021bfac"
			},
			"ap-southeast-1": {
				"64": "ami-6443ee07"
			},
			"ap-southeast-2": {
				"64": "ami-2af8c149"
			},
			"eu-central-1": {
				"64": "ami-2826e147"
			},
			"us-east-1": {
				"64": "ami-25122a32"
			},
			"us-east-2": {
				"64": "ami-d18dd7b4"
			},
			"us-west-1": {
				"64": "ami-293d6a49"
			},
			"us-west-2": {
				"64": "ami-cbb41dab"
			}
        },
        "mapAlertLogicDataCenters": {
            "US-Denver": {
                "receiverHostname": "al-receiver.alertlogic.net",
                "receiverAddress": "204.110.219.98",
                "vaporatorHostname": "vaporator.alertlogic.com",
                "vaporatorAddress": "204.110.219.102",
                "accessRange1": "204.110.218.96/27",
                "accessRange2": "204.110.219.96/27",
                "accessRange3": "216.52.175.192/26"
            },
            "US-Ashburn": {
                "receiverHostname": "al-receiver.alertlogic.net",
                "receiverAddress": "208.71.209.42",
                "vaporatorHostname": "vaporator.alertlogic.com",
                "vaporatorAddress": "208.71.209.45",
                "accessRange1": "208.71.209.32/27",
                "accessRange2": "208.71.209.32/27",
                "accessRange3": "208.71.209.32/27"
            },
            "UK": {
                "receiverHostname": "al-receiver.alertlogic.net",
                "receiverAddress": "185.54.124.97",
                "vaporatorHostname": "vaporator.alertlogic.com",
                "vaporatorAddress": "185.54.124.102",
                "accessRange1": "185.54.124.0/24",
                "accessRange2": "185.54.124.0/24",
                "accessRange3": "185.54.124.0/24"
            }
        },
        "mapMasterEBSVolumeSize": {
            "m3.medium": {
                "EBS": "100"
            },
            "m3.large": {
                "EBS": "200"
            },
            "m4.large": {
                "EBS": "200"
            },
            "m3.xlarge": {
                "EBS": "300"
            },
            "m4.xlarge": {
                "EBS": "300"
            }
		}
    },
    "Conditions": {
		"proxyProtocolEnable" : {"Fn::Equals" : [{"Ref" : "proxyProtocol"}, "enable"]}
    },
    "Resources": {
        "sgELBMaster": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Security group for WSM master ELB",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "4849",
                        "ToPort": "4849",
                        "CidrIp": { "Fn::FindInMap": ["mapAlertLogicDataCenters", { "Ref": "alertLogicDataCenter" }, "accessRange1"] }
                    }, {
                        "IpProtocol": "tcp",
                        "FromPort": "2222",
                        "ToPort": "2222",
                        "CidrIp": { "Fn::FindInMap": ["mapAlertLogicDataCenters", { "Ref": "alertLogicDataCenter" }, "accessRange1"] }
                    }, {
                        "IpProtocol": "tcp",
                        "FromPort": "4849",
                        "ToPort": "4849",
                        "CidrIp": { "Fn::FindInMap": ["mapAlertLogicDataCenters", { "Ref": "alertLogicDataCenter" }, "accessRange2"] }
                    }, {
                        "IpProtocol": "tcp",
                        "FromPort": "2222",
                        "ToPort": "2222",
                        "CidrIp": { "Fn::FindInMap": ["mapAlertLogicDataCenters", { "Ref": "alertLogicDataCenter" }, "accessRange2"] }
                    }, {
                        "IpProtocol": "tcp",
                        "FromPort": "4849",
                        "ToPort": "4849",
                        "CidrIp": { "Fn::FindInMap": ["mapAlertLogicDataCenters", { "Ref": "alertLogicDataCenter" }, "accessRange3"] }
                    }, {
                        "IpProtocol": "tcp",
                        "FromPort": "5666",
                        "ToPort": "5666",
                        "CidrIp": { "Fn::FindInMap": ["mapAlertLogicDataCenters", { "Ref": "alertLogicDataCenter" }, "accessRange3"] }
                    }
                ],
                "VpcId": {
                    "Ref": "vpc"
                }
            }
        },
        "sgELBMasterEgress4848and4849": {
            "Type": "AWS::EC2::SecurityGroupEgress",
            "Properties": {
                "GroupId": { "Ref": "sgELBMaster" },
                "IpProtocol": "tcp",
                "FromPort": "4848",
                "ToPort": "4849",
                "DestinationSecurityGroupId": { "Ref": "sgMaster" }
            }
        },
        "sgELBMasterEgress22": {
            "Type": "AWS::EC2::SecurityGroupEgress",
            "Properties": {
                "GroupId": { "Ref": "sgELBMaster" },
                "IpProtocol": "tcp",
                "FromPort": "22",
                "ToPort": "22",
                "DestinationSecurityGroupId": { "Ref": "sgMaster" }
            }
        },
        "sgMaster": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Security group for WSM master",
                "SecurityGroupEgress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "443",
                        "ToPort": "443",
                        "CidrIp": "0.0.0.0/0"
                    }, {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    }, {
                        "IpProtocol": "udp",
                        "FromPort": "53",
                        "ToPort": "53",
                        "CidrIp": "0.0.0.0/0"
                    }, {
                        "IpProtocol": "udp",
                        "FromPort": "123",
                        "ToPort": "123",
                        "CidrIp": "0.0.0.0/0"
                    }
                ],
                "VpcId": {
                    "Ref": "vpc"
                }
            }
        },
        "sgMasterIngress22": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": { "Ref": "sgMaster" },
                "IpProtocol": "tcp",
                "FromPort": "22",
                "ToPort": "22",
                "SourceSecurityGroupId": { "Ref": "sgELBMaster" }
            }
        },
        "sgMasterIngress4848and4849": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": { "Ref": "sgMaster" },
                "IpProtocol": "tcp",
                "FromPort": "4848",
                "ToPort": "4849",
                "SourceSecurityGroupId": { "Ref": "sgELBMaster" }
            }
        },
        "sgMasterIngress5556": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": { "Ref": "sgMaster" },
                "IpProtocol": "tcp",
                "FromPort": "5556",
                "ToPort": "5556",
                "SourceSecurityGroupId": { "Ref": "sgWorker" }
            }
        },
        "sgMasterIngress2625": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": { "Ref": "sgMaster" },
                "IpProtocol": "tcp",
                "FromPort": "2625",
                "ToPort": "2625",
                "SourceSecurityGroupId": { "Ref": "sgWorker" }
            }
        },
        "sgMasterIngress123": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": { "Ref": "sgMaster" },
                "IpProtocol": "udp",
                "FromPort": "123",
                "ToPort": "123",
                "SourceSecurityGroupId": { "Ref": "sgWorker" }
            }
        },
        "sgMasterIngress514": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": { "Ref": "sgMaster" },
                "IpProtocol": "udp",
                "FromPort": "514",
                "ToPort": "514",
                "SourceSecurityGroupId": { "Ref": "sgWorker" }
            }
        },
        "sgMasterIngress5559and5560": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": { "Ref": "sgMaster" },
                "IpProtocol": "tcp",
                "FromPort": "5559",
                "ToPort": "5560",
                "SourceSecurityGroupId": { "Ref": "sgWorker" }
            }
        },
        "sgMasterEgress22": {
            "Type": "AWS::EC2::SecurityGroupEgress",
            "Properties": {
                "GroupId": { "Ref": "sgMaster" },
                "IpProtocol": "tcp",
                "FromPort": "22",
                "ToPort": "22",
                "DestinationSecurityGroupId": { "Ref": "sgWorker" }
            }
        },
        "sgMasterEgress5559and5560": {
            "Type": "AWS::EC2::SecurityGroupEgress",
            "Properties": {
                "GroupId": { "Ref": "sgMaster" },
                "IpProtocol": "tcp",
                "FromPort": "5559",
                "ToPort": "5560",
                "DestinationSecurityGroupId": { "Ref": "sgWorker" }
            }
        },
        "sgELBWorker": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Security group for WSM worker ELB",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "443",
                        "ToPort": "443",
                        "CidrIp": "0.0.0.0/0"
                    }, {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    }
                ],
                "VpcId": {
                    "Ref": "vpc"
                }
            }
        },
        "sgELBWorkerEgress4848": {
            "Type": "AWS::EC2::SecurityGroupEgress",
            "Properties": {
                "GroupId": { "Ref": "sgELBWorker" },
                "IpProtocol": "tcp",
                "FromPort": "4848",
                "ToPort": "4848",
                "DestinationSecurityGroupId": { "Ref": "sgWorker" }
            }
        },
        "sgELBWorkerEgress80": {
            "Type": "AWS::EC2::SecurityGroupEgress",
            "Properties": {
                "GroupId": { "Ref": "sgELBWorker" },
                "IpProtocol": "tcp",
                "FromPort": "80",
                "ToPort": "80",
                "DestinationSecurityGroupId": { "Ref": "sgWorker" }
            }
        },
        "sgELBWorkerEgress443": {
            "Type": "AWS::EC2::SecurityGroupEgress",
            "Properties": {
                "GroupId": { "Ref": "sgELBWorker" },
                "IpProtocol": "tcp",
                "FromPort": "443",
                "ToPort": "443",
                "DestinationSecurityGroupId": { "Ref": "sgWorker" }
            }
        },
        "sgWorker": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Security group for WSM workers",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "SourceSecurityGroupId": {
                            "Ref": "sgMaster"
                        }
                    }, {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "SourceSecurityGroupId": {
                            "Ref": "sgELBWorker"
                        }
                    }, {
                        "IpProtocol": "tcp",
                        "FromPort": "443",
                        "ToPort": "443",
                        "SourceSecurityGroupId": {
                            "Ref": "sgELBWorker"
                        }
                    }, {
                        "IpProtocol": "tcp",
                        "FromPort": "4848",
                        "ToPort": "4849",
                        "SourceSecurityGroupId": {
                            "Ref": "sgELBWorker"
                        }
                    }, {
                        "IpProtocol": "tcp",
                        "FromPort": "5559",
                        "ToPort": "5560",
                        "SourceSecurityGroupId": {
                            "Ref": "sgMaster"
                        }
                    }
                ],
                "SecurityGroupEgress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    }, {
                        "IpProtocol": "tcp",
                        "FromPort": "443",
                        "ToPort": "443",
                        "CidrIp": "0.0.0.0/0"
                    }, {
                        "IpProtocol": "udp",
                        "FromPort": "53",
                        "ToPort": "53",
                        "CidrIp": "0.0.0.0/0"
                    }, {
                        "IpProtocol": "udp",
                        "FromPort": "123",
                        "ToPort": "123",
                        "CidrIp": "0.0.0.0/0"
                    }, {
                        "IpProtocol": "udp",
                        "FromPort": "514",
                        "ToPort": "514",
                        "SourceSecurityGroupId": {
                            "Ref": "sgMaster"
                        }
                    }, {
                        "IpProtocol": "tcp",
                        "FromPort": "5556",
                        "ToPort": "5556",
                        "SourceSecurityGroupId": {
                            "Ref": "sgMaster"
                        }
                    }, {
                        "IpProtocol": "tcp",
                        "FromPort": "2625",
                        "ToPort": "2625",
                        "SourceSecurityGroupId": {
                            "Ref": "sgMaster"
                        }
                    }, {
                        "IpProtocol": "tcp",
                        "FromPort": "5559",
                        "ToPort": "5560",
                        "SourceSecurityGroupId": {
                            "Ref": "sgMaster"
                        }
                    }
                ],
                "VpcId": {
                    "Ref": "vpc"
                }
            }
        },
        "elbMaster": {
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties": {
                "HealthCheck": {
                    "HealthyThreshold": "2",
                    "Interval": "30",
                    "Target": "HTTP:4848/healthcheck.html",
                    "Timeout": "5",
                    "UnhealthyThreshold": "5"
                },
                "Listeners": [
                    {
                        "InstancePort": "4849",
                        "LoadBalancerPort": "4849",
                        "Protocol": "TCP",
                        "InstanceProtocol": "TCP",
                        "PolicyNames": []
                    }, {
                        "InstancePort": "22",
                        "LoadBalancerPort": "2222",
                        "Protocol": "TCP",
                        "InstanceProtocol": "TCP",
                        "PolicyNames": []
                    }
                ],
                "Subnets": [ { "Ref": "subnetMasterELB" } ],
                "SecurityGroups": [
                    {
                        "Ref": "sgELBMaster"
                    }
                ]
            }
        },
        "elbWorker": {
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties": {
                "CrossZone" : "True",
                "HealthCheck": {
                    "HealthyThreshold": "2",
                    "Interval": "30",
                    "Target": "HTTP:4848/healthcheck.html",
                    "Timeout": "5",
                    "UnhealthyThreshold": "5"
                },
                "Listeners": [
                    {
                        "InstancePort": "80",
                        "LoadBalancerPort": "80",
                        "Protocol": "HTTP",
                        "PolicyNames": []
                    },
					{
						"Fn::If": [
							"proxyProtocolEnable",
							{
									"InstancePort": "443",
									"LoadBalancerPort": "443",
									"Protocol": "TCP",
									"PolicyNames": []
							},
							{"Ref" : "AWS::NoValue"}
						]
					}
                ],
  				"Policies": [
                    {
						"Fn::If": [
							"proxyProtocolEnable",
							{
								"InstancePorts": [ "80", "443" ],
								"PolicyName": "EnableProxyProtocolPolicy",
								"PolicyType": "ProxyProtocolPolicyType",
								"Attributes": [
									{ 
										"Name": "ProxyProtocol", 
										"Value": true 
									}
								]
							},
							{"Ref" : "AWS::NoValue"}
						]
                    }
                ],
                "Subnets": {
                    "Ref": "subnetWorkerELBList"
                },
                "SecurityGroups": [
                    {
                        "Ref": "sgELBWorker"
                    }
                ]
            }
        },
        "volumeLog": {
            "Type": "AWS::EC2::Volume",
            "Properties": {
                "Size": {
                    "Fn::FindInMap" : [ "mapMasterEBSVolumeSize", { "Ref" : "wsmMasterInstanceType" }, "EBS"]
                },
                "VolumeType": "gp2",
                "AvailabilityZone": { "Ref": "azMaster"},
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "WSM Master Log Volume"
                    }
                ]
            }
        },
        "lcMaster": {
            "DependsOn": "iamInstanceProfileMaster",
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Properties": {
                "IamInstanceProfile": {
                    "Ref": "iamInstanceProfileMaster"
                },
                "ImageId": {
                    "Fn::FindInMap" : [ "mapRegionWsmAmi", { "Ref" : "AWS::Region" }, "64"]
                },
                "BlockDeviceMappings": [ {
                    "DeviceName": "/dev/sda1",
                    "Ebs" : { "VolumeSize" : 80, "VolumeType": "gp2" }
                } ],
                "AssociatePublicIpAddress": {
                    "Ref": "subnetMasterIsPublic"
                },
                "InstanceType": {
                    "Ref": "wsmMasterInstanceType"
                },
                "SecurityGroups": [
                    {
                        "Ref": "sgMaster"
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": ["", ["{\"alertlogic\": {\"wsm\": {\"role\" : \"master\",  \"license\" : \"", {
                                    "Ref": "wsmLicense"
                                }, "\", \"user\" : \"", {
                                    "Ref": "wsmUser"
                                }, "\", \"password\" : \"", {
                                    "Ref": "wsmPassword"
                                }, "\", \"S3BucketName\" : \"", {
                                    "Ref": "s3Bucket"
                                }, "\", \"EbsLogVolume\" : \"", {
                                    "Ref": "volumeLog"
                                }, "\", \"MasterElbDnsName\" : \"", {
                                    "Fn::GetAtt": ["elbMaster" , "DNSName"]
                                }, "\", \"WorkerElbDnsName\" : \"", {
                                    "Fn::GetAtt": ["elbWorker" , "DNSName"]
                                }, "\", \"BackendElbDnsName\" : \"", {
                                    "Ref": "defaultBackend"
                                }, "\", \"hosts\": [{\"hostname\" : \"", {
                                        "Fn::FindInMap": ["mapAlertLogicDataCenters", { "Ref": "alertLogicDataCenter" }, "receiverHostname"]
                                    }, "\", \"address\": \"", {
                                        "Fn::FindInMap": ["mapAlertLogicDataCenters", { "Ref": "alertLogicDataCenter" }, "receiverAddress"]
                                    }, "\"}, {\"hostname\": \"", {
                                        "Fn::FindInMap": ["mapAlertLogicDataCenters", { "Ref": "alertLogicDataCenter" }, "vaporatorHostname"]
                                    }, "\", \"address\": \"", {
                                        "Fn::FindInMap": ["mapAlertLogicDataCenters", { "Ref": "alertLogicDataCenter" }, "vaporatorAddress"]
                                    }, "\"}]}}}"
                            ]
                        ]
                    }
                }
            }
        },
        "lcWorker": {
            "DependsOn": "iamInstanceProfileMaster",
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Properties": {
                "IamInstanceProfile": {
                    "Ref": "iamInstanceProfileMaster"
                },
                "ImageId": {
                    "Fn::FindInMap" : [ "mapRegionWsmAmi", { "Ref" : "AWS::Region" }, "64"]
                },
                "BlockDeviceMappings": [ {
                    "DeviceName": "/dev/sda1",
                    "Ebs": { "VolumeSize" : {"Ref": "wsmWorkerInstanceVolumeSize"}, "VolumeType": "gp2" }
                } ],
                "AssociatePublicIpAddress": {
                    "Ref": "subnetWorkerIsPublic"
                },
                "InstanceType": {
                    "Ref": "wsmWorkerInstanceType"
                },
                "SecurityGroups": [
                    {
                        "Ref": "sgWorker"
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": ["", ["{\"alertlogic\": {\"wsm\": {\"role\" : \"worker\",  \"license\" : \"", {
                                    "Ref": "wsmLicense"
                                }, "\", \"S3BucketName\" : \"", {
                                    "Ref": "s3Bucket"
                                }, "\", \"WorkerElbName\" : \"", {
                                    "Ref": "elbWorker"
                                }, "\", \"BackendElbDnsName\" : \"", {
                                    "Ref": "defaultBackend"
                                }, "\", \"hosts\": [{\"hostname\" : \"", {
                                        "Fn::FindInMap": ["mapAlertLogicDataCenters", { "Ref": "alertLogicDataCenter" }, "receiverHostname"]
                                    }, "\", \"address\": \"", {
                                        "Fn::FindInMap": ["mapAlertLogicDataCenters", { "Ref": "alertLogicDataCenter" }, "receiverAddress"]
                                    }, "\"}, {\"hostname\": \"", {
                                        "Fn::FindInMap": ["mapAlertLogicDataCenters", { "Ref": "alertLogicDataCenter" }, "vaporatorHostname"]
                                    }, "\", \"address\": \"", {
                                        "Fn::FindInMap": ["mapAlertLogicDataCenters", { "Ref": "alertLogicDataCenter" }, "vaporatorAddress"]
                                    }, "\"}]}}}"
                            ]
                        ]
                    }
                }
            }
        },
        "asgMaster": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "AvailabilityZones": [ { "Ref": "azMaster" } ],
                "VPCZoneIdentifier": [
                    {
                        "Ref": "subnetMaster"
                    }
                ],
                "HealthCheckType": "ELB",
                "HealthCheckGracePeriod": 1800,
                "Cooldown": "300",
                "DesiredCapacity": "1",
                "MaxSize": "1",
                "MinSize": "1",
                "LaunchConfigurationName": {
                    "Ref": "lcMaster"
                },
                "LoadBalancerNames": [
                    {
                        "Ref": "elbMaster"
                    }
                ],
                "Tags": [
                    {
                      "Key": "Name",
                      "Value": { "Fn::Join": [ "", [ { "Ref": "AWS::StackName" }, "-master" ] ] },
                      "PropagateAtLaunch": "true"
                    }
                ]
            }
        },
        "asgWorker": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "AvailabilityZones": { "Ref": "azWorkerList" },
                "VPCZoneIdentifier": { "Ref": "subnetWorkerList"},
                "HealthCheckType": "ELB",
                "HealthCheckGracePeriod": 1800,
                "Cooldown": "300",
                "DesiredCapacity": "2",
                "MaxSize": "6",
                "MinSize": "2",
                "LaunchConfigurationName": {
                    "Ref": "lcWorker"
                },
                "LoadBalancerNames": [
                    {
                        "Ref": "elbWorker"
                    }
                ],
                "Tags": [
                    {
                      "Key": "Name",
                      "Value": { "Fn::Join": [ "", [ { "Ref": "AWS::StackName" }, "-worker" ] ] },
                      "PropagateAtLaunch": "true"
                    }
                ]
            }
        },
        "s3Bucket": {
            "Type": "AWS::S3::Bucket"
        },
        "iamRoleMaster": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": ["ec2.amazonaws.com"]
                            },
                            "Action": ["sts:AssumeRole"]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "wsmMasterS3",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Sid": "EBSAccess",
                                    "Action": ["ec2:AttachVolume", "ec2:DescribeVolumeAttribute", "ec2:DescribeVolumeStatus", "ec2:DescribeVolumes", "ec2:DetachVolume"],
                                    "Effect": "Allow",
                                    "Resource": ["*"]
                                }, {
                                    "Sid": "ListAccess",
                                    "Action": ["s3:ListBucket", "s3:GetBucketLocation", "s3:ListBucketMultipartUploads"],
                                    "Effect": "Allow",
                                    "Resource": {
                                        "Fn::Join": ["",
                                            ["arn:aws:s3:::", {
                                                    "Ref": "s3Bucket"
                                                }
                                            ]
                                        ]
                                    }
                                }, {
                                    "Sid": "ObjectAccess",
                                    "Action": ["s3:GetObject", "s3:PutObject"],
                                    "Effect": "Allow",
                                    "Resource": {
                                        "Fn::Join": ["",
                                            ["arn:aws:s3:::", {
                                                    "Ref": "s3Bucket"
                                                }, "/*"
                                            ]
                                        ]
                                    }
                                }, {
                                    "Sid": "PublishMetrics",
                                    "Action": ["cloudwatch:PutMetricData"],
                                    "Effect": "Allow",
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "iamInstanceProfileMaster": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "iamRoleMaster"
                    }
                ]
            }
        },
        "policyScaleUpWorkers": {
            "Type": "AWS::AutoScaling::ScalingPolicy",
            "Properties": {
                "AdjustmentType": "ChangeInCapacity",
                "AutoScalingGroupName": {
                    "Ref": "asgWorker"
                },
                "Cooldown": "1",
                "ScalingAdjustment": "2"
            }
        },
        "policyScaleDownWorkers": {
            "Type": "AWS::AutoScaling::ScalingPolicy",
            "Properties": {
                "AdjustmentType": "ChangeInCapacity",
                "AutoScalingGroupName": {
                    "Ref": "asgWorker"
                },
                "Cooldown": "1",
                "ScalingAdjustment": "-2"
            }
        },
        "alarmCPUHighWorkers": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "EvaluationPeriods": "2",
                "Statistic": "Average",
                "Threshold": {
                    "Ref": "asScaleUpCPUth"
                },
                "AlarmDescription": "Alarm if CPU too high or metric disappears indicating instance is down",
                "Period": {
                    "Ref": "asScaleUpTimeInterval"
                },
                "AlarmActions": [
                    {
                        "Ref": "policyScaleUpWorkers"
                    }
                ],
                "Namespace": "AWS/EC2",
                "Dimensions": [
                    {
                        "Name": "AutoScalingGroupName",
                        "Value": {
                            "Ref": "asgWorker"
                        }
                    }
                ],
                "ComparisonOperator": "GreaterThanThreshold",
                "MetricName": "CPUUtilization"
            }
        },
        "alarmCPULowWorkers": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "EvaluationPeriods": "2",
                "Statistic": "Average",
                "Threshold": {
                    "Ref": "asScaleDownCPUth"
                },
                "AlarmDescription": "Alarm if CPU too low",
                "Period": {
                    "Ref": "asScaleDownTimeInterval"
                },
                "AlarmActions": [
                    {
                        "Ref": "policyScaleDownWorkers"
                    }
                ],
                "Namespace": "AWS/EC2",
                "Dimensions": [
                    {
                        "Name": "AutoScalingGroupName",
                        "Value": {
                            "Ref": "asgWorker"
                        }
                    }
                ],
                "ComparisonOperator": "LessThanThreshold",
                "MetricName": "CPUUtilization"
            }
        }
    },
    "Outputs": {
        "wsmManagement": {
            "Value": {
                "Fn::Join": ["", ["https://", {
                            "Fn::GetAtt": ["elbMaster" , "DNSName"]
                        }, ":4849/"
                    ]
                ]
            },
            "Description": "Manage your wsm appliance"
        },
        "elbWorker": {
            "Value": {
                "Fn::GetAtt": ["elbWorker" , "DNSName"]
            },
            "Description": "DNS Name of worker WSM ELB"
        }
    }
}