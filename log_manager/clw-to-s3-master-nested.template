{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "CloudWatch Log export to S3 Bucket via Kinesis Stream and Lambda. This template requires setting the \"Create IAM resources\" parameter to True.",
  "Parameters": {
    "CloudWatchLogGroup": {
      "Description": "The name of the CloudWatch Logs Group to export to S3 bucket.",
      "Type": "String"
    },
    "KinesisStreamArn": {
      "Description": "ARN of the Kinesis Stream that you pre-built previously",
      "Type": "String"
    },
    "LogFormat": {
      "Description": "Choose the format that best describes the type of logs in the selected log group",
      "Type": "String",
      "Default": "AWS VPC Flow Logs",
      "AllowedValues": [
        "AWS VPC Flow Logs",
        "AWS Lambda",
        "AWS IoT",
        "Custom"
      ]
    },
    "SubscriptionFilterPattern": {
      "Description": "Specify the CloudWatch subscription filter to be used to filter data sent to the S3.",
      "Type": "String"
    },
    "S3BucketName": {
      "Description": "Target S3 bucket to store the CloudWatch logs into.",
      "Type": "String"
    },
    "S3LogFolderName": {
      "Description": "Add a name of the folder to place logs into. If you leave this parameter empty, the name of the stack will be used.",
      "Type": "String"
    },
    "LambdaS3BucketNamePrefix": {
      "Description": "The S3 bucket which contains Lambda package to be used for archiving CloudWath Logs to S3",
      "Type": "String",
      "Default": "alertlogic-public-repo",
      "MinLength": "5"
    },
    "LambdaPackageName": {
      "Description": "Object name containing Lambda package to be used for archiving CloudWath Logs to S3.",
      "Type": "String",
      "Default": "cloudwatch-logs-s3-export-0.0.11.zip",
      "MinLength": "5"
    },
    "AlertLogicAWSAccountId": {
      "Description": "Alert Logic's AWS Account ID used for collecting data. A third-party role will be created to give read-only access to the 'S3BucketName'. Don't change this value",
      "Type": "String",
      "Default": "239734009475"
    },
    "AlertLogicPublicApiKey": {
      "Description": "Public Api key issued to you by Alert Logic. Leave this field if you like to setup the log source manually in the UI.",
      "Type": "String",
      "Default": "",
      "NoEcho": "true"
    },
    "AlertLogicAccountId": {
      "Description": "Your Alert Logic's Account ID. Leave this field if you like to setup the log source manually in the UI. Use child Account ID if you want to send to a child account.",
      "Type": "String",
      "Default": ""
    },
    "TemplateURL": {
      "Type": "String",
      "Description": "The S3 bucket object URL that store the Cloud Formation child nested template (clw-to-s3-child-nested.template)",
      "Default": "https://s3.amazonaws.com/mmohamed-tools/templates/clw-to-s3-child-nested.template"
    }
  },
  "Conditions": {
    "EmptyPrefix": {
      "Fn::Equals": [{
          "Ref": "S3LogFolderName"
        },
        ""
      ]
    }
  },
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [{
        "Label": {
          "default": "Alert Logic Log Manager Configuration (Optional)"
        },
        "Parameters": [
          "AlertLogicAccountId",
          "AlertLogicPublicApiKey",
          "AlertLogicAWSAccountId"
        ]
      }, {
        "Label": {
          "default": "Data Collection Configuration"
        },
        "Parameters": [
          "CloudWatchLogGroup",
          "LogFormat",
          "S3BucketName",
          "S3LogFolderName",
          "SubscriptionFilterPattern"
        ]
      }, {
        "Label": {
          "default": "Lambda Configuration"
        },
        "Parameters": [
          "LambdaS3BucketNamePrefix",
          "LambdaPackageName",
          "KinesisStreamArn"
        ]
      }],
      "ParameterLabels": {
        "AlertLogicAccountId": {
          "default": "Your Alert Logic account id:"
        },
        "AlertLogicAWSAccountId": {
          "default": "Alert Logic AWS account id to grant access to your data:"
        },
        "AlertLogicPublicApiKey": {
          "default": "Alert Logic API key:"
        },
        "LambdaS3BucketNamePrefix": {
          "default": "Lambda package S3 bucket prefix:"
        },
        "LambdaPackageName": {
          "default": "Lambda package name:"
        },
        "CloudWatchLogGroup": {
          "default": "CloudWatch log group name:"
        },
        "LogFormat": {
          "default": "Log Format:"
        },
        "S3BucketName": {
          "default": "S3 bucket name:"
        },
        "S3LogFolderName": {
          "default": "Logs folder name:"
        },
        "SubscriptionFilterPattern": {
          "default": "CloudWatch subscription filter:"
        },
        "KinesisStreamArn": {
          "default": "ARN of an active stream:"
        }
      }
    }
  },
  "Resources": {
    "AlertLogicS3AccessRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {
              "AWS": {
                "Fn::Join": [
                  "", [
                    "arn:aws:iam::",
                    {
                      "Ref": "AlertLogicAWSAccountId"
                    },
                    ":root"
                  ]
                ]
              }
            },
            "Action": "sts:AssumeRole",
            "Condition": {
              "StringEquals": {
                "sts:ExternalId": {
                  "Ref": "AWS::AccountId"
                }
              }
            }
          }]
        }
      }
    },
    "AlertLogicS3AccessPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": {
          "Fn::Join": [
            "", [{
                "Ref": "AWS::AccountId"
              },
              "-",
              {
                "Ref": "AWS::Region"
              },
              "-AlertLogicS3AccessPolicy"
            ]
          ]
        },
        "Roles": [{
          "Ref": "AlertLogicS3AccessRole"
        }],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
              "Sid": "S3AuditLoggingAndLogCollection1",
              "Effect": "Allow",
              "Action": [
                "s3:GetObject"
              ],
              "Resource": {
                "Fn::Join": [
                  "", [
                    "arn:aws:s3:::", {
                      "Ref": "S3BucketName"
                    },
                    "/*"
                  ]
                ]
              }
            },
            {
              "Sid": "S3AuditLoggingAndLogCollection2",
              "Action": [
                "s3:ListBucket"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "", [
                    "arn:aws:s3:::",
                    {
                      "Ref": "S3BucketName"
                    }
                  ]
                ]
              }
            }
          ]
        }
      }
    },
    "CloudWatchLogsKinesisRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {
              "Service": {
                "Fn::Join": [
                  "", [
                    "logs.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".amazonaws.com"
                  ]
                ]
              }
            },
            "Action": "sts:AssumeRole"
          }]
        }
      }
    },
    "CloudWatchLogsKinesisPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "CloudWatchLogsKinesisPolicy",
        "Roles": [{
          "Ref": "CloudWatchLogsKinesisRole"
        }],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
              "Effect": "Allow",
              "Action": ["kinesis:PutRecord", "kinesis:PutRecords"],
              "Resource": {
                "Ref": "KinesisStreamArn"
              }
            },
            {
              "Effect": "Allow",
              "Action": "iam:PassRole",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudWatchLogsKinesisRole",
                  "Arn"
                ]
              }
            }
          ]
        }
      },
      "DependsOn": [
        "CloudWatchLogsKinesisRole"
      ]
    },
    "LambdaS3ExportWorkerRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {
              "Service": "lambda.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
          }]
        }
      }
    },
    "LambdaS3ExportWorkerPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "LambdaS3ExportWorkerPolicy",
        "Roles": [{
          "Ref": "LambdaS3ExportWorkerRole"
        }],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
              "Effect": "Allow",
              "Action": [
                "logs:DescribeLogStreams",
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": "arn:aws:logs:*:*:*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:PutObject"
              ],
              "Resource": {
                "Fn::Join": [
                  "", [
                    "arn:aws:s3:::",
                    {
                      "Ref": "S3BucketName"
                    },
                    "/*"
                  ]
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:GetBucketLocation",
                "s3:GetLifecycleConfiguration",
                "s3:PutLifecycleConfiguration"
              ],
              "Resource": {
                "Fn::Join": [
                  "", [
                    "arn:aws:s3:::",
                    {
                      "Ref": "S3BucketName"
                    }
                  ]
                ]
              }
            }
          ]
        }
      }
    },
    "CreateLambdaS3ExportWorkerFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Handler": "index.handler",
        "Description": "CloudWatch Logs export to S3 function.",
        "Role": {
          "Fn::GetAtt": [
            "LambdaS3ExportWorkerRole",
            "Arn"
          ]
        },
        "Code": {
          "S3Bucket": {
            "Fn::Join": [
              "", [
                "alertlogic-public-repo.",
                {
                  "Ref": "AWS::Region"
                }
              ]
            ]
          },
          "S3Key": {
            "Ref": "LambdaPackageName"
          }
        },
        "Runtime": "nodejs4.3",
        "Timeout": "300"
      },
      "DependsOn": [
        "LambdaS3ExportWorkerPolicy"
      ]
    },
    "LambdaDriverExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {
              "Service": "lambda.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
          }]
        }
      }
    },
    "LambdaDriverExecutionPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "LambdaDriverExecutionPolicy",
        "Roles": [{
          "Ref": "LambdaDriverExecutionRole"
        }],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
              "Effect": "Allow",
              "Action": "lambda:InvokeFunction",
              "Resource": {
                "Fn::GetAtt": [
                  "CreateLambdaS3ExportWorkerFunction",
                  "Arn"
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "logs:DescribeLogStreams",
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": "arn:aws:logs:*:*:*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "kinesis:GetRecords",
                "kinesis:GetShardIterator",
                "kinesis:DescribeStream",
                "kinesis:ListStreams"
              ],
              "Resource": {
                "Ref": "KinesisStreamArn"
              }
            }
          ]
        }
      },
      "DependsOn": [
        "LambdaDriverExecutionRole"
      ]
    },
    "CreateLambdaDriverFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "LambdaDriverExecutionRole",
            "Arn"
          ]
        },
        "Description": "Pre-processor wrapper function that invokes the actual CloudWatch Logs export function with custom attributes.",
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "", [
                "var awsRegion = '",
                {
                  "Ref": "AWS::Region"
                },
                "',\n",
                "    lambdaFunctionName  = '",
                {
                  "Ref": "CreateLambdaS3ExportWorkerFunction"
                },
                "',\n",
                "    logFormat = '",
                {
                  "Ref": "LogFormat"
                },
                "',\n",
                "    s3BucketName = '",
                {
                  "Ref": "S3BucketName"
                },
                "',\n",
                "    s3LogFilePrefix = '",
                {
                  "Fn::Join": [
                    "", [{
                        "Fn::If": [
                          "EmptyPrefix",
                          {
                            "Ref": "AWS::StackName"
                          },
                          {
                            "Ref": "S3LogFolderName"
                          }
                        ]
                      },
                      "/"
                    ]
                  ]
                },
                "',\n",
                "    AWS = require('aws-sdk');\n",
                "exports.handler = function(event, context) {\n",
                "    AWS.config.update({region: awsRegion});\n",
                "    var lambda  = new AWS.Lambda({apiVersion: '2015-03-31'}),\n",
                "        args = {\n",
                "            awsRegion:         awsRegion,\n",
                "            s3BucketName:      s3BucketName,\n",
                "            s3LogFilePrefix:   s3LogFilePrefix,\n",
                "            logFormat:         logFormat,\n",
                "            records:           event.Records\n",
                "        },\n",
                "        payload = {operation: 'processLogs', data: args},\n",
                "        params  = {\n",
                "            FunctionName:      lambdaFunctionName,\n",
                "            InvocationType:    'RequestResponse',\n",
                "            Payload:           JSON.stringify(payload)\n",
                "        };\n",
                "    lambda.invoke(params, function(err, data) {\n",
                "        if (err) {\n",
                "            console.error('Failed to invoke lambda function. Error: ' + JSON.stringify(err));\n",
                "            return context.fail(err);\n",
                "        }\n",
                "        return context.done();\n",
                "    });\n",
                "};"
              ]
            ]
          }
        },
        "Runtime": "nodejs4.3",
        "Timeout": "300"
      },
      "DependsOn": [
        "LambdaDriverExecutionPolicy"
      ]
    },
    "CreateLogSourceFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "LambdaDriverExecutionRole",
            "Arn"
          ]
        },
        "Description": "Create Alert Logic Log Source.",
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "", [
                "var awsRegion = '",
                {
                  "Ref": "AWS::Region"
                },
                "',\n",
                "    lambdaFunctionName  = '",
                {
                  "Ref": "CreateLambdaS3ExportWorkerFunction"
                },
                "',\n",
                "    response = require('cfn-response'),\n",
                "    AWS = require('aws-sdk');\n",
                "\n",
                "exports.handler = function(event, context) {\n",
                "    var responseData = {},\n",
                "        payload      = {};\n",
                "    AWS.config.update({region: awsRegion});\n",
                "    console.log('REQUEST RECEIVED:\\n', JSON.stringify(event));\n",
                "    if (event.RequestType === 'Delete') {\n",
                "        payload = {operation: 'deleteSource', data: event.ResourceProperties.CreateSourceParams};\n",
                "    } else if(event.RequestType === 'Create') { \n",
                "        payload = {operation: 'createSource', data: event.ResourceProperties.CreateSourceParams};\n",
                "    } else {\n",
                "        return response.send(event, context, response.SUCCESS);\n",
                "    }\n",
                "    var lambda  = new AWS.Lambda({apiVersion: '2015-03-31'}),\n",
                "        params = {\n",
                "            FunctionName:      lambdaFunctionName,\n",
                "            InvocationType:    'RequestResponse',\n",
                "            Payload:           JSON.stringify(payload)\n",
                "        };\n",
                "    lambda.invoke(params, function(err, result) {\n",
                "        if (err) {\n",
                "            responseData = {Error: 'Lambda Invoke call failed. ' + JSON.stringify(err)};\n",
                "            return response.send(event, context, response.FAILED, responseData);\n",
                "        }\n",
                "        console.log('Result: ' + JSON.stringify(result));\n",
                "        var data = JSON.parse(result.Payload);\n",
                "        if (data && data.hasOwnProperty('id')) {\n",
                "            responseData['id'] = data.id;\n",
                "            return response.send(event, context, response.SUCCESS, responseData);\n",
                "        } else if (event.RequestType === 'Delete') {\n",
                "            return response.send(event, context, response.SUCCESS, data);\n",
                "        } else {\n",
                "            responseData = {Error: 'Invalid source id.'};\n",
                "            return response.send(event, context, response.FAILED, responseData);\n",
                "        }\n",
                "    });\n",
                "};"
              ]
            ]
          }
        },
        "Runtime": "nodejs4.3",
        "Timeout": "60"
      },
      "DependsOn": [
        "CreateLambdaS3ExportWorkerFunction",
        "LambdaDriverExecutionPolicy"
      ]
    },
    "LogSourceInfo": {
      "Type": "Custom::LogSourceInfo",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CreateLogSourceFunction",
            "Arn"
          ]
        },
        "CreateSourceParams": {
          "customerId": {
            "Ref": "AlertLogicAccountId"
          },
          "auth": {
            "Fn::Join": [
              "", [{
                  "Ref": "AlertLogicPublicApiKey"
                },
                ":"
              ]
            ]
          },
          "name": {
            "Fn::Join": [
              "", [{
                  "Ref": "AWS::StackName"
                },
                "-",
                {
                  "Ref": "AWS::AccountId"
                },
                "-",
                {
                  "Ref": "AWS::Region"
                }
              ]
            ]
          },
          "type": "s3",
          "logFormat": {
            "Ref": "LogFormat"
          },
          "credentials": {
            "type": "iam_role",
            "arn": {
              "Fn::GetAtt": [
                "AlertLogicS3AccessRole",
                "Arn"
              ]
            },
            "externalId": {
              "Ref": "AWS::AccountId"
            }
          },
          "policy": {
            "default": "false",
            "multiline": {
              "is_multiline": "false"
            },
            "timestamp": {
              "format": ""
            }
          },
          "s3": {
            "enabled": "true",
            "bucket": {
              "Fn::Join": [
                "", [{
                    "Ref": "S3BucketName"
                  },
                  "/",
                  {
                    "Fn::If": [
                      "EmptyPrefix",
                      {
                        "Ref": "AWS::StackName"
                      },
                      {
                        "Ref": "S3LogFolderName"
                      }
                    ]
                  }
                ]
              ]
            },
            "file_pattern": ".*",
            "time_zone": "GMT",
            "max_collection_interval": "300"
          }
        }
      },
      "DependsOn": [
        "CreateLogSourceFunction",
        "LambdaDriverExecutionPolicy"
      ]
    },
    "StackCreateCloudWatchLogExport": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "Parameters": {
          "KinesisStreamArn": {
            "Ref": "KinesisStreamArn"
          },
          "SubscriptionFilterPattern": {
            "Ref": "SubscriptionFilterPattern"
          },
          "CloudWatchLogGroup": {
            "Ref": "CloudWatchLogGroup"
          },
          "CloudWatchLogsKinesisRoleArn": {
            "Fn::GetAtt": [
              "CloudWatchLogsKinesisRole",
              "Arn"
            ]
          },
          "LambdaDriverFunctionArn": {
            "Fn::GetAtt": [
              "CreateLambdaDriverFunction",
              "Arn"
            ]
          }
        },
        "TemplateURL": {
          "Ref": "TemplateURL"
        },
        "TimeoutInMinutes": "2"
      },
      "DependsOn": [
        "CreateLambdaDriverFunction",
        "CreateLambdaS3ExportWorkerFunction",
        "CloudWatchLogsKinesisRole"
      ]
    }
  },
  "Outputs": {
    "S3Output": {
      "Value": {
        "Fn::GetAtt": [
          "AlertLogicS3AccessRole",
          "Arn"
        ]
      },
      "Description": "Use this IAM Role to setup S3 collection in Alert Logic Log Manager UI Portal if you going to set up credentials and log source manually."
    }
  }
}
